/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  NitroAdjudicator,
  NitroAdjudicatorInterface,
} from "../NitroAdjudicator";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "channelId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "assetIndex",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "initialHoldings",
        type: "uint256",
      },
    ],
    name: "AllocationUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "channelId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint48",
        name: "newTurnNumRecord",
        type: "uint48",
      },
    ],
    name: "ChallengeCleared",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "channelId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint48",
        name: "turnNumRecord",
        type: "uint48",
      },
      {
        indexed: false,
        internalType: "uint48",
        name: "finalizesAt",
        type: "uint48",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isFinal",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "participants",
            type: "address[]",
          },
          {
            internalType: "uint64",
            name: "channelNonce",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "appDefinition",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "challengeDuration",
            type: "uint48",
          },
        ],
        indexed: false,
        internalType: "struct INitroTypes.FixedPart",
        name: "fixedPart",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        indexed: false,
        internalType: "struct INitroTypes.SignedVariablePart[]",
        name: "proof",
        type: "tuple[]",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        indexed: false,
        internalType: "struct INitroTypes.SignedVariablePart",
        name: "candidate",
        type: "tuple",
      },
    ],
    name: "ChallengeRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "channelId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint48",
        name: "finalizesAt",
        type: "uint48",
      },
    ],
    name: "Concluded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "destination",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountDeposited",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "destinationHoldings",
        type: "uint256",
      },
    ],
    name: "Deposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "channelId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "assetIndex",
        type: "uint256",
      },
    ],
    name: "Reclaimed",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "participants",
            type: "address[]",
          },
          {
            internalType: "uint64",
            name: "channelNonce",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "appDefinition",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "challengeDuration",
            type: "uint48",
          },
        ],
        internalType: "struct INitroTypes.FixedPart",
        name: "fixedPart",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        internalType: "struct INitroTypes.SignedVariablePart[]",
        name: "proof",
        type: "tuple[]",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        internalType: "struct INitroTypes.SignedVariablePart",
        name: "candidate",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct INitroTypes.Signature",
        name: "challengerSig",
        type: "tuple",
      },
    ],
    name: "challenge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "participants",
            type: "address[]",
          },
          {
            internalType: "uint64",
            name: "channelNonce",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "appDefinition",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "challengeDuration",
            type: "uint48",
          },
        ],
        internalType: "struct INitroTypes.FixedPart",
        name: "fixedPart",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        internalType: "struct INitroTypes.SignedVariablePart[]",
        name: "proof",
        type: "tuple[]",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        internalType: "struct INitroTypes.SignedVariablePart",
        name: "candidate",
        type: "tuple",
      },
    ],
    name: "checkpoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "destination",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "allocationType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "metadata",
            type: "bytes",
          },
        ],
        internalType: "struct ExitFormat.Allocation[]",
        name: "sourceAllocations",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "destination",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "allocationType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "metadata",
            type: "bytes",
          },
        ],
        internalType: "struct ExitFormat.Allocation[]",
        name: "targetAllocations",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "indexOfTargetInSource",
        type: "uint256",
      },
    ],
    name: "compute_reclaim_effects",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "destination",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "allocationType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "metadata",
            type: "bytes",
          },
        ],
        internalType: "struct ExitFormat.Allocation[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialHoldings",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "destination",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "allocationType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "metadata",
            type: "bytes",
          },
        ],
        internalType: "struct ExitFormat.Allocation[]",
        name: "allocations",
        type: "tuple[]",
      },
      {
        internalType: "uint256[]",
        name: "indices",
        type: "uint256[]",
      },
    ],
    name: "compute_transfer_effects_and_interactions",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "destination",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "allocationType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "metadata",
            type: "bytes",
          },
        ],
        internalType: "struct ExitFormat.Allocation[]",
        name: "newAllocations",
        type: "tuple[]",
      },
      {
        internalType: "bool",
        name: "allocatesOnlyZeros",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "destination",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "allocationType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "metadata",
            type: "bytes",
          },
        ],
        internalType: "struct ExitFormat.Allocation[]",
        name: "exitAllocations",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "totalPayouts",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "participants",
            type: "address[]",
          },
          {
            internalType: "uint64",
            name: "channelNonce",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "appDefinition",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "challengeDuration",
            type: "uint48",
          },
        ],
        internalType: "struct INitroTypes.FixedPart",
        name: "fixedPart",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        internalType: "struct INitroTypes.SignedVariablePart",
        name: "candidate",
        type: "tuple",
      },
    ],
    name: "conclude",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "participants",
            type: "address[]",
          },
          {
            internalType: "uint64",
            name: "channelNonce",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "appDefinition",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "challengeDuration",
            type: "uint48",
          },
        ],
        internalType: "struct INitroTypes.FixedPart",
        name: "fixedPart",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        internalType: "struct INitroTypes.SignedVariablePart",
        name: "candidate",
        type: "tuple",
      },
    ],
    name: "concludeAndTransferAllAssets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "channelId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "expectedHeld",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "holdings",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "sourceChannelId",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "sourceStateHash",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "sourceOutcomeBytes",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "sourceAssetIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "indexOfTargetInSource",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "targetStateHash",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "targetOutcomeBytes",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "targetAssetIndex",
            type: "uint256",
          },
        ],
        internalType: "struct IMultiAssetHolder.ReclaimArgs",
        name: "reclaimArgs",
        type: "tuple",
      },
    ],
    name: "reclaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "participants",
            type: "address[]",
          },
          {
            internalType: "uint64",
            name: "channelNonce",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "appDefinition",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "challengeDuration",
            type: "uint48",
          },
        ],
        internalType: "struct INitroTypes.FixedPart",
        name: "fixedPart",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        internalType: "struct INitroTypes.SignedVariablePart[]",
        name: "proof",
        type: "tuple[]",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        internalType: "struct INitroTypes.SignedVariablePart",
        name: "candidate",
        type: "tuple",
      },
    ],
    name: "requireStateSupported",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "statusOf",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "assetIndex",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "fromChannelId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "outcomeBytes",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "stateHash",
        type: "bytes32",
      },
      {
        internalType: "uint256[]",
        name: "indices",
        type: "uint256[]",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "channelId",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "address",
            name: "asset",
            type: "address",
          },
          {
            components: [
              {
                internalType: "enum ExitFormat.AssetType",
                name: "assetType",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "metadata",
                type: "bytes",
              },
            ],
            internalType: "struct ExitFormat.AssetMetadata",
            name: "assetMetadata",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "destination",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint8",
                name: "allocationType",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "metadata",
                type: "bytes",
              },
            ],
            internalType: "struct ExitFormat.Allocation[]",
            name: "allocations",
            type: "tuple[]",
          },
        ],
        internalType: "struct ExitFormat.SingleAssetExit[]",
        name: "outcome",
        type: "tuple[]",
      },
      {
        internalType: "bytes32",
        name: "stateHash",
        type: "bytes32",
      },
    ],
    name: "transferAllAssets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "channelId",
        type: "bytes32",
      },
    ],
    name: "unpackStatus",
    outputs: [
      {
        internalType: "uint48",
        name: "turnNumRecord",
        type: "uint48",
      },
      {
        internalType: "uint48",
        name: "finalizesAt",
        type: "uint48",
      },
      {
        internalType: "uint160",
        name: "fingerprint",
        type: "uint160",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class NitroAdjudicator__factory {
  static readonly abi = _abi;
  static createInterface(): NitroAdjudicatorInterface {
    return new utils.Interface(_abi) as NitroAdjudicatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NitroAdjudicator {
    return new Contract(address, _abi, signerOrProvider) as NitroAdjudicator;
  }
}
