/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ConsensusApp,
  ConsensusAppInterface,
} from "../../../../../../../node_modules/@statechannels/nitro-protocol/dist/artifacts/contracts/ConsensusApp";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "participants",
            type: "address[]",
          },
          {
            internalType: "uint64",
            name: "channelNonce",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "appDefinition",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "challengeDuration",
            type: "uint48",
          },
        ],
        internalType: "struct INitroTypes.FixedPart",
        name: "fixedPart",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "signedBy",
            type: "uint256",
          },
        ],
        internalType: "struct INitroTypes.RecoveredVariablePart[]",
        name: "proof",
        type: "tuple[]",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            internalType: "uint256",
            name: "signedBy",
            type: "uint256",
          },
        ],
        internalType: "struct INitroTypes.RecoveredVariablePart",
        name: "candidate",
        type: "tuple",
      },
    ],
    name: "stateIsSupported",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657610a86908161001c8239f35b600080fdfe6101006004908136101561001257600080fd5b600090813560e01c639936d8121461002957600080fd5b3461043f576060917ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc91838336011261043f5784359067ffffffffffffffff9081831161043b57608085843603011261043b576024908135838111610437573660238201121561043757808901359084821161043357838260051b82010136811161042f576044359186831161042b576040809a843603011261042b576080850185811088821117610400578a52878c01358781116103fc578801973660238a0112156103fc578c890135610105610100826104f6565b6104b2565b998a91808c52896020809d019160051b830101913683116103f8578a8d9101915b8383106103e0575050505086528681013588811681036103dc57610161916064918b8901526101576044820161050e565b8d89015201610534565b8b86015287610172610100866104f6565b809581520190868101915b8383106103b257505050506101959036908b016105b8565b905161035757840151908186925b6102be575060ff9051519116036102635784519683880192831188841017610239575050839291959352808352815194859360018552838286015280518094860152825b84811061022357505050828201840152601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168101030190f35b81810183015188820188015287955082016101e7565b604185917f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b86600a606492858851937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f21756e616e696d6f7573000000000000000000000000000000000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019080821161032c57169160ff8091169081146103015760010191806101a3565b838760118c7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b848860118d7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b606489600a85888b51937f08c379a00000000000000000000000000000000000000000000000000000000085528401528201527f7c70726f6f667c213d30000000000000000000000000000000000000000000006044820152fd5b82358981116103d8578a916103cd83928b36918701016105b8565b81520192019161017d565b8b80fd5b8a80fd5b81906103eb8461050e565b8152019101908c90610126565b8d80fd5b8980fd5b868a60418f7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8880fd5b8780fd5b8680fd5b8580fd5b8380fd5b5080fd5b604051906040820182811067ffffffffffffffff82111761046357604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051906080820182811067ffffffffffffffff82111761046357604052565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f604051930116820182811067ffffffffffffffff82111761046357604052565b67ffffffffffffffff81116104635760051b60200190565b359073ffffffffffffffffffffffffffffffffffffffff8216820361052f57565b600080fd5b359065ffffffffffff8216820361052f57565b81601f8201121561052f5780359067ffffffffffffffff82116104635761059560207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f850116016104b2565b928284526020838301011161052f57816000926020809301838601378301015290565b604091816080528060a052031261052f576105d1610443565b60805180358060c05267ffffffffffffffff811161052f576080910160a051031261052f576105fe610492565b9060c051608051019267ffffffffffffffff84351161052f5760a0518435850190601f8201121561052f573591610637610100846104f6565b91602083858152019460a051873560c05160805101019060208760051b8301011161052f57939591949360200192905b873560c05160805101019160208660051b8401018510156109d65767ffffffffffffffff85351161052f5760607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08635850160a05103011261052f576040519283606081011067ffffffffffffffff6060860111176109a85760206106f691606086016040528735010161050e565b83528435893560c05160805101010160408101359067ffffffffffffffff821161052f576040917fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910160a05103011261052f57610752610443565b85358a3560c05160805101010160046020604083013583010135101561052f578060406020920135010135815285358a3560c05160805101010167ffffffffffffffff604080830135830101351161052f5760a0516107c1916040808201359091019081013501602001610547565b602082015260208401528435893560c05160805101010160e05267ffffffffffffffff606060e05101351161052f5760a05160e0516060810135019690603f8801121561052f5761081861010060208901356104f6565b9860208a818a01358152019260a051606060e05101358d8a35903560c0516080510101010190604060208c013560051b8301011161052f57604001935b606060e05101358d8a35903560c0516080510101010190604060208c013560051b8301018610156109865785359167ffffffffffffffff831161052f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0836080920160a05103011261052f578160808f938c6108d0610492565b95604083606060e05101358435843560c05189510101010101013587526060838160e05101358435843560c0518951010101010101356020880152606060e05101359135903560c05185510101010101013560ff8116810361052f578f906040850152606060e0510135908c35903560c05160805101010101019060a08201359267ffffffffffffffff841161052f57610976602094936040869560a051920101610547565b6060820152815201940193610855565b5050604086019a909a5293855292979295505060209384019390920191610667565b602460007f4e487b710000000000000000000000000000000000000000000000000000000081526041600452fd5b975094959350505050815260c0516080510160208101359067ffffffffffffffff821161052f57610a0b9160a0519101610547565b6020820152610a22604060c0516080510101610534565b6040820152606060c051608051010135801515810361052f576060820152825260206080510135602083015256fea26469706673582212207d7ba0c142d50bf30cf771678e34fba8721c91319b790d1c75345b6fb1318fd264736f6c63430008110033";

type ConsensusAppConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ConsensusAppConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ConsensusApp__factory extends ContractFactory {
  constructor(...args: ConsensusAppConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<ConsensusApp> {
    return super.deploy(overrides || {}) as Promise<ConsensusApp>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ConsensusApp {
    return super.attach(address) as ConsensusApp;
  }
  override connect(signer: Signer): ConsensusApp__factory {
    return super.connect(signer) as ConsensusApp__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ConsensusAppInterface {
    return new utils.Interface(_abi) as ConsensusAppInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ConsensusApp {
    return new Contract(address, _abi, signerOrProvider) as ConsensusApp;
  }
}
