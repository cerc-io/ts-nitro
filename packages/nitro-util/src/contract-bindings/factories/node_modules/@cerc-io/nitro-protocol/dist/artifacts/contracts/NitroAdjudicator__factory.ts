/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  NitroAdjudicator,
  NitroAdjudicatorInterface,
} from "../../../../../../../node_modules/@cerc-io/nitro-protocol/dist/artifacts/contracts/NitroAdjudicator";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "channelId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "assetIndex",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "initialHoldings",
        type: "uint256",
      },
    ],
    name: "AllocationUpdated",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "channelId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint48",
        name: "newTurnNumRecord",
        type: "uint48",
      },
    ],
    name: "ChallengeCleared",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "channelId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint48",
        name: "turnNumRecord",
        type: "uint48",
      },
      {
        indexed: false,
        internalType: "uint48",
        name: "finalizesAt",
        type: "uint48",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "isFinal",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address[]",
            name: "participants",
            type: "address[]",
          },
          {
            internalType: "uint64",
            name: "channelNonce",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "appDefinition",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "challengeDuration",
            type: "uint48",
          },
        ],
        indexed: false,
        internalType: "struct INitroTypes.FixedPart",
        name: "fixedPart",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        indexed: false,
        internalType: "struct INitroTypes.SignedVariablePart[]",
        name: "proof",
        type: "tuple[]",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        indexed: false,
        internalType: "struct INitroTypes.SignedVariablePart",
        name: "candidate",
        type: "tuple",
      },
    ],
    name: "ChallengeRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "channelId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint48",
        name: "finalizesAt",
        type: "uint48",
      },
    ],
    name: "Concluded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "destination",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "destinationHoldings",
        type: "uint256",
      },
    ],
    name: "Deposited",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "channelId",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "assetIndex",
        type: "uint256",
      },
    ],
    name: "Reclaimed",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "participants",
            type: "address[]",
          },
          {
            internalType: "uint64",
            name: "channelNonce",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "appDefinition",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "challengeDuration",
            type: "uint48",
          },
        ],
        internalType: "struct INitroTypes.FixedPart",
        name: "fixedPart",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        internalType: "struct INitroTypes.SignedVariablePart[]",
        name: "proof",
        type: "tuple[]",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        internalType: "struct INitroTypes.SignedVariablePart",
        name: "candidate",
        type: "tuple",
      },
      {
        components: [
          {
            internalType: "uint8",
            name: "v",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "s",
            type: "bytes32",
          },
        ],
        internalType: "struct INitroTypes.Signature",
        name: "challengerSig",
        type: "tuple",
      },
    ],
    name: "challenge",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "participants",
            type: "address[]",
          },
          {
            internalType: "uint64",
            name: "channelNonce",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "appDefinition",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "challengeDuration",
            type: "uint48",
          },
        ],
        internalType: "struct INitroTypes.FixedPart",
        name: "fixedPart",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        internalType: "struct INitroTypes.SignedVariablePart[]",
        name: "proof",
        type: "tuple[]",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        internalType: "struct INitroTypes.SignedVariablePart",
        name: "candidate",
        type: "tuple",
      },
    ],
    name: "checkpoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "destination",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "allocationType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "metadata",
            type: "bytes",
          },
        ],
        internalType: "struct ExitFormat.Allocation[]",
        name: "sourceAllocations",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "destination",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "allocationType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "metadata",
            type: "bytes",
          },
        ],
        internalType: "struct ExitFormat.Allocation[]",
        name: "targetAllocations",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "indexOfTargetInSource",
        type: "uint256",
      },
    ],
    name: "compute_reclaim_effects",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "destination",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "allocationType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "metadata",
            type: "bytes",
          },
        ],
        internalType: "struct ExitFormat.Allocation[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialHoldings",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "destination",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "allocationType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "metadata",
            type: "bytes",
          },
        ],
        internalType: "struct ExitFormat.Allocation[]",
        name: "allocations",
        type: "tuple[]",
      },
      {
        internalType: "uint256[]",
        name: "indices",
        type: "uint256[]",
      },
    ],
    name: "compute_transfer_effects_and_interactions",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "destination",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "allocationType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "metadata",
            type: "bytes",
          },
        ],
        internalType: "struct ExitFormat.Allocation[]",
        name: "newAllocations",
        type: "tuple[]",
      },
      {
        internalType: "bool",
        name: "allocatesOnlyZeros",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "destination",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint8",
            name: "allocationType",
            type: "uint8",
          },
          {
            internalType: "bytes",
            name: "metadata",
            type: "bytes",
          },
        ],
        internalType: "struct ExitFormat.Allocation[]",
        name: "exitAllocations",
        type: "tuple[]",
      },
      {
        internalType: "uint256",
        name: "totalPayouts",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "participants",
            type: "address[]",
          },
          {
            internalType: "uint64",
            name: "channelNonce",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "appDefinition",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "challengeDuration",
            type: "uint48",
          },
        ],
        internalType: "struct INitroTypes.FixedPart",
        name: "fixedPart",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        internalType: "struct INitroTypes.SignedVariablePart",
        name: "candidate",
        type: "tuple",
      },
    ],
    name: "conclude",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "participants",
            type: "address[]",
          },
          {
            internalType: "uint64",
            name: "channelNonce",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "appDefinition",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "challengeDuration",
            type: "uint48",
          },
        ],
        internalType: "struct INitroTypes.FixedPart",
        name: "fixedPart",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        internalType: "struct INitroTypes.SignedVariablePart",
        name: "candidate",
        type: "tuple",
      },
    ],
    name: "concludeAndTransferAllAssets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "asset",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "channelId",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "expectedHeld",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "holdings",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "sourceChannelId",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "sourceStateHash",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "sourceOutcomeBytes",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "sourceAssetIndex",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "indexOfTargetInSource",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "targetStateHash",
            type: "bytes32",
          },
          {
            internalType: "bytes",
            name: "targetOutcomeBytes",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "targetAssetIndex",
            type: "uint256",
          },
        ],
        internalType: "struct IMultiAssetHolder.ReclaimArgs",
        name: "reclaimArgs",
        type: "tuple",
      },
    ],
    name: "reclaim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address[]",
            name: "participants",
            type: "address[]",
          },
          {
            internalType: "uint64",
            name: "channelNonce",
            type: "uint64",
          },
          {
            internalType: "address",
            name: "appDefinition",
            type: "address",
          },
          {
            internalType: "uint48",
            name: "challengeDuration",
            type: "uint48",
          },
        ],
        internalType: "struct INitroTypes.FixedPart",
        name: "fixedPart",
        type: "tuple",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        internalType: "struct INitroTypes.SignedVariablePart[]",
        name: "proof",
        type: "tuple[]",
      },
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: "address",
                    name: "asset",
                    type: "address",
                  },
                  {
                    components: [
                      {
                        internalType: "enum ExitFormat.AssetType",
                        name: "assetType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.AssetMetadata",
                    name: "assetMetadata",
                    type: "tuple",
                  },
                  {
                    components: [
                      {
                        internalType: "bytes32",
                        name: "destination",
                        type: "bytes32",
                      },
                      {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                      },
                      {
                        internalType: "uint8",
                        name: "allocationType",
                        type: "uint8",
                      },
                      {
                        internalType: "bytes",
                        name: "metadata",
                        type: "bytes",
                      },
                    ],
                    internalType: "struct ExitFormat.Allocation[]",
                    name: "allocations",
                    type: "tuple[]",
                  },
                ],
                internalType: "struct ExitFormat.SingleAssetExit[]",
                name: "outcome",
                type: "tuple[]",
              },
              {
                internalType: "bytes",
                name: "appData",
                type: "bytes",
              },
              {
                internalType: "uint48",
                name: "turnNum",
                type: "uint48",
              },
              {
                internalType: "bool",
                name: "isFinal",
                type: "bool",
              },
            ],
            internalType: "struct INitroTypes.VariablePart",
            name: "variablePart",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint8",
                name: "v",
                type: "uint8",
              },
              {
                internalType: "bytes32",
                name: "r",
                type: "bytes32",
              },
              {
                internalType: "bytes32",
                name: "s",
                type: "bytes32",
              },
            ],
            internalType: "struct INitroTypes.Signature[]",
            name: "sigs",
            type: "tuple[]",
          },
        ],
        internalType: "struct INitroTypes.SignedVariablePart",
        name: "candidate",
        type: "tuple",
      },
    ],
    name: "stateIsSupported",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "statusOf",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "assetIndex",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "fromChannelId",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "outcomeBytes",
        type: "bytes",
      },
      {
        internalType: "bytes32",
        name: "stateHash",
        type: "bytes32",
      },
      {
        internalType: "uint256[]",
        name: "indices",
        type: "uint256[]",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "channelId",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "address",
            name: "asset",
            type: "address",
          },
          {
            components: [
              {
                internalType: "enum ExitFormat.AssetType",
                name: "assetType",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "metadata",
                type: "bytes",
              },
            ],
            internalType: "struct ExitFormat.AssetMetadata",
            name: "assetMetadata",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "bytes32",
                name: "destination",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
              {
                internalType: "uint8",
                name: "allocationType",
                type: "uint8",
              },
              {
                internalType: "bytes",
                name: "metadata",
                type: "bytes",
              },
            ],
            internalType: "struct ExitFormat.Allocation[]",
            name: "allocations",
            type: "tuple[]",
          },
        ],
        internalType: "struct ExitFormat.SingleAssetExit[]",
        name: "outcome",
        type: "tuple[]",
      },
      {
        internalType: "bytes32",
        name: "stateHash",
        type: "bytes32",
      },
    ],
    name: "transferAllAssets",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "channelId",
        type: "bytes32",
      },
    ],
    name: "unpackStatus",
    outputs: [
      {
        internalType: "uint48",
        name: "turnNumRecord",
        type: "uint48",
      },
      {
        internalType: "uint48",
        name: "finalizesAt",
        type: "uint48",
      },
      {
        internalType: "uint160",
        name: "fingerprint",
        type: "uint160",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080806040523461001657613cf4908161001c8239f35b600080fdfe6040608081526004908136101561001557600080fd5b600091823560e01c91826311e9f178146118c4578263166e56cd146118775782632fb1d270146115225782633033730e146112cf57826331afa0b414610fff578263552cfa5014610f77578263566d54c614610f095782635685b7dc14610c615782636d2a9c9214610b6e5782638286a060146107c3578263c7df14e21461079c578263d3c4e73814610495578263ec346235146100dc57505063ee049b50146100be57600080fd5b346100d9576100d56100cf366120d3565b90612483565b5080f35b80fd5b90915034610491576100f86100f0366120d3565b809291612483565b905151906101058161386a565b61010e82613ca1565b9261014c8260005260006020526040600020548060d01c9173ffffffffffffffffffffffffffffffffffffffff65ffffffffffff8360a01c16921690565b96915050815195602096878101968988528482015283815261016d81611955565b73ffffffffffffffffffffffffffffffffffffffff80978192519020169116036104505750600194835193601f196101bc6101a787611a33565b966101b486519889611a10565b808852611a33565b0182895b828110610416575050506101d4815161394e565b976101df825161394e565b96815b83518110156102bb578a6101f68286612686565b5161024b88820151610235858761020d828c612686565b51511695868a5260018c528d8d8b20908b528c528c8a205461022f8383612686565b52612686565b51908a5191610243836119f4565b888352612f24565b90939291156102b1575b918991869594938f6102ac9861026a91612686565b528b610276878c612686565b510152015189519261028784611955565b8352888301528882015261029b828b612686565b526102a6818a612686565b5061260d565b6101e2565b969d508d96610255565b5089928997835b825181101561034b57808b6102e882876102df6103469689612686565b51511692612686565b51908752600189528987208b885289526103068a8820918254612f17565b9055897fb3917fd12b23b8d48703d554ab284c5b1912bb5c67e710c7534a56c1306376798a610335848b612686565b518151908582528c820152a261260d565b6102c2565b50838088888b868e1561038e575083528290528120555b805b82518110156100d5578061038461037e6103899386612686565b51613612565b61260d565b610364565b61039e61040a9195939295613ca1565b6103db8660005260006020526040600020548060d01c9173ffffffffffffffffffffffffffffffffffffffff65ffffffffffff8360a01c16921690565b5091908651926103ea846119a0565b65ffffffffffff80921684521684830152848683015260608201526139e6565b93825252822055610362565b855161042181611955565b8b8152865161042f816119bc565b8c81526060908185820152848301528782015282828a0101520183906101c0565b85606492519162461bcd60e51b8352820152601560248201527f696e636f72726563742066696e6765727072696e7400000000000000000000006044820152fd5b8280fd5b9091503461049157602090600319828136011261079857833567ffffffffffffffff94858211610794576101008093833603011261079457835192830183811087821117610768578452818101358352848301916024810135835260448101358781116107645761050b90833691840101611a7a565b9085850191825260608501976064820135895260808601916084810135835260a087019060a4810135825260c48101359283116107605760e46105548b94883691850101611a7a565b918260c08b01520135916105918c61058c60e08c0198868a528c51905192519761057d8261386a565b8c5190845190850120906137ba565b612c0b565b96878b61059d85612c0b565b96600260ff73ffffffffffffffffffffffffffffffffffffffff936105df816105d486886105cb828c612686565b51511699612686565b5101518d5190612686565b510151160361071d576106048e6105f961060d938e612686565b5101518a5190612686565b51519688612686565b515116036106db57509861067f61068a94826106748f7f4d3754632451ebba9812a9305e7bca17b67a17186a5cff93d2e9ae1b01e3d27b9f9e8f98849f9e9c996106cf9e9c9961066d936106608461386a565b51918151910120906137ba565b5189612686565b510151945190612686565b5101519051916132dd565b918451928661069a8b5185612686565b510152519085516106c6816106b88a8201948b86528a8301906131ae565b03601f198101835282611a10565b519020916138c9565b5193519051908152a280f35b6064908c8c519162461bcd60e51b8352820152601d60248201527f746172676574417373657420213d2067756172616e74656541737365740000006044820152fd5b506064838f8f519162461bcd60e51b8352820152601a60248201527f6e6f7420612067756172616e74656520616c6c6f636174696f6e0000000000006044820152fd5b8b80fd5b8880fd5b6024886041847f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b8680fd5b8480fd5b91503461049157602060031936011261049157602092829135815280845220549051908152f35b909150346104915760c06003193601126104915767ffffffffffffffff918035838111610798576107f79036908301611e3c565b90602435848111610b6a5761080f90369083016120b5565b93604435908111610b6a576108279036908301611f04565b60607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c360112610b6a57835161085c81611955565b60643560ff81168103610b665781526020936084358583015260a4358683015261088581613b78565b9665ffffffffffff91828886510151169561089f8a61397f565b6108a881612117565b610b3557836108ea8b60005260006020526040600020548060d01c9173ffffffffffffffffffffffffffffffffffffffff65ffffffffffff8360a01c16921690565b5050168710610af3575b6109086109028785856127ed565b90612150565b610972610916875184613c2a565b9561096d8451918c80518d8101918b835280820152600960608201527f666f7263654d6f76650000000000000000000000000000000000000000000000608082015260808152610965816119d8565b519020613a9a565b61269a565b15610ab1575091828960608c98969499979501916109c361099885855116864216612180565b918c8660608a51015115159151948b8652168b8501528d84015260c0606084015260c08301906121c9565b81810360808301528a51808252898201918a808360051b8301019d01928c915b838310610a73575050505050610a4792610a3f927f0e6d8300485cb09fa95f22b89b46f7b0cc3029f1bbf257a0884414d415546cf88380610a32610a699d9e9f8a97810360a08401528c612413565b0390a25116834216612180565b935151613ca1565b92885194610a54866119a0565b855216858401528683015260608201526139e6565b9382525282205580f35b929550929597999b50929597999b8c80610a9983601f1986600196030187528951612413565b9701930193018f9b9997959c9a9896938f95926109e3565b606490888a519162461bcd60e51b8352820152601f60248201527f4368616c6c656e676572206973206e6f742061207061727469636970616e74006044820152fd5b606490888a519162461bcd60e51b8352820152601860248201527f7475726e4e756d5265636f7264206465637265617365642e00000000000000006044820152fd5b6001610b408b61397f565b610b4981612117565b03610b5d57610b58878b612aa2565b6108f4565b610b588a612b39565b8780fd5b8580fd5b9150346104915760606003193601126104915767ffffffffffffffff90803582811161079857610ba19036908301611e3c565b602435838111610b6a57610bb890369084016120b5565b93604435938411610b6a57610c29610902610bf96020957f07da0a0674fb921e484018c8b81d80e292745e5d8ed134b580c8b9c631c5e9e097369101611f04565b610c0285613b78565b9765ffffffffffff85835101511695610c1a8a612b39565b610c24878b612aa2565b6127ed565b610c4f8151610c37816119a0565b838152878582015287838201528760608201526139e6565b8587528684528187205551908152a280f35b838234610f05576003196060813601126104915781359067ffffffffffffffff9283831161079857828101833603946080848701126107945760243594818611610b665736602387011215610b66578584013595828711610764573660248860051b830101116107645760443592808411610f01578a878536030112610f0157604483019081359873ffffffffffffffffffffffffffffffffffffffff93848b16809b03610efd57610d4d91610d29610d2f92610d1e368c611e3c565b926024369201612045565b906128f7565b95610d47610d3d368a611e3c565b9136908b01611f04565b90612987565b968c519a7f9936d812000000000000000000000000000000000000000000000000000000008c526060828d01527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd60e48d0198359101811215610efd578501602481019791013590828211610efd578160051b36038813610efd5791818c9a989694928e9c9a989694608060648e0152526101048b0196908c5b818110610ec2575050509365ffffffffffff610e37606486610e4c96610e2b8f9d9a978e6084819f9c9a610e5b9f9b6024610e229101611e14565b16910152611cdf565b1660a48c015201611e29565b1660c488015284878303016024880152612798565b91848303016044850152612778565b03915afa908115610eb857828092610e8f575b5050610e8b90835193849315158452806020850152830190611c12565b0390f35b610e8b9350610eb092503d8091833e610ea88183611a10565b810190612732565b909184610e6e565b83513d84823e3d90fd5b92948097999b9d50829a9c50610ede6001939992959799611cdf565b168152602080910199019101908c9a989694928e9c9a98969492610de7565b8c80fd5b8980fd5b5080fd5b9150346104915760606003193601126104915767ffffffffffffffff813581811161079857610f3b9036908401611ac1565b936024359182116100d9575092610f5b610f6492610e8b95369101611ac1565b604435916132dd565b9051918291602083526020830190611c37565b9083346100d95760206003193601126100d957606073ffffffffffffffffffffffffffffffffffffffff84610fe0853560005260006020526040600020548060d01c9173ffffffffffffffffffffffffffffffffffffffff65ffffffffffff8360a01c16921690565b90939183519465ffffffffffff80921686521660208501521690820152f35b839034610f05576060806003193601126104915760243567ffffffffffffffff81116112cb576110329036908601611d00565b9361103d813561386a565b61105461104986613ca1565b8235906044356137ba565b600192855192601f1961107e61106986611a33565b9561107685519788611a10565b808752611a33565b0190865b82811061129157505050611096865161394e565b6110a0875161394e565b90865b885181101561118b576110b6818a612686565b518985820151918a61112573ffffffffffffffffffffffffffffffffffffffff6110e08786612686565b5151169485835260016020528983208b35845260205289832054611104888a612686565b5261110f8789612686565b51908a519161111d836119f4565b848352612f24565b91959293909515611183575b50918961114d88809897969460209661022f61117e9c8f612686565b510152015187519261115e84611955565b83526020830152868201526111738289612686565b526102a68188612686565b6110a3565b9c508d611131565b5096909193959495855b8251811015611236578073ffffffffffffffffffffffffffffffffffffffff6111c16112319386612686565b5151166111ce8287612686565b5190895260209060018252888a2088358b5282526111f0898b20918254612f17565b90556111fc828c612686565b518851918383528201527fb3917fd12b23b8d48703d554ab284c5b1912bb5c67e710c7534a56c13063767988883592a261260d565b611195565b509650905083946000146112715750358252816020528120555b805b82518110156100d5578061038461037e61126c9386612686565b611252565b61128c9350611281919250613ca1565b9060443590356138c9565b611250565b602090845161129f81611955565b89815285516112ad816119bc565b8a815283908582820152818301528487830152828901015201611082565b8380fd5b838234610f055760a0600319360112610f055767ffffffffffffffff92604490602490813584358435888111610b665761130c9036908801611a7a565b966064988935906084359081116104915761132a9036908a01611b91565b93825b600181018082116114f75786518110156113ab5761135661134e8389612686565b519188612686565b51111561136b576113669061260d565b61132d565b8b8a7f496e6469636573206d75737420626520736f72746564000000000000000000008b60168c60208d519562461bcd60e51b8752860152840152820152fd5b5050898187939496956113bd8261386a565b825192602094859485830120906113d491896137ba565b6113dd90612c0b565b9173ffffffffffffffffffffffffffffffffffffffff97886113ff8486612686565b51511697888b5260018652878b20838c528652878b205491886114228688612686565b510151906114309184612f24565b91509a8d52600188528c858b822091528852898d209081549061145291612f17565b90558861145f8688612686565b51015287518681018781529080611478818c01896131ae565b03601f198101825261148a9082611a10565b51902061149791846138c9565b86805191848352868301527fb3917fd12b23b8d48703d554ab284c5b1912bb5c67e710c7534a56c13063767991a26114ce91612686565b5194855116940151908251946114e386611955565b85528401528201526114f490613612565b80f35b888560118d7f4e487b7100000000000000000000000000000000000000000000000000000000835252fd5b83906080600319360112610f0557611538611cbc565b9060249182359260649586358560a01c156118365773ffffffffffffffffffffffffffffffffffffffff84169182885260209360018552868920888a5285526044908135888b2054036117f7578461165657833403611617575050507f87d4c0b5e30d6808bc8a94ba1c4d839b29d664151551a31753387ee9ef48429b959697505b8188526001835284882087895283526115d7858920918254612b98565b9055865260018152828620858752905281852054915173ffffffffffffffffffffffffffffffffffffffff9190911681526020810191909152604090a280f35b8a9291601f7f496e636f7272656374206d73672e76616c756520666f72206465706f7369740092888b519562461bcd60e51b8752860152840152820152fd5b879a92939a518681017f23b872dd000000000000000000000000000000000000000000000000000000008152338383015230848301528c8583015284825261169d826119d8565b8951916116a9836119bc565b8883527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656489840152873b156117b6578c6116f4939281925190828b5af16116ee612ba5565b90612bd5565b80518061172b575b5050505050507f87d4c0b5e30d6808bc8a94ba1c4d839b29d664151551a31753387ee9ef48429b9495966115ba565b818891810103126117b2578661174191016126ee565b1561174d5780806116fc565b917f5361666545524332303a204552433230206f7065726174696f6e20646964206e7f6f7420737563636565640000000000000000000000000000000000000000000092602a60849695898c519762461bcd60e51b8952880152860152840152820152fd5b8a80fd5b5050508391601d7f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000092888b519562461bcd60e51b8752860152840152820152fd5b8a929160147f68656c6420213d20657870656374656448656c6400000000000000000000000092888b519562461bcd60e51b8752860152840152820152fd5b50601f8792602086519362461bcd60e51b85528401528201527f4465706f73697420746f2065787465726e616c2064657374696e6174696f6e006044820152fd5b839034610f055780600319360112610f05578060209273ffffffffffffffffffffffffffffffffffffffff6118aa611cbc565b168152600184528181206024358252845220549051908152f35b83346100d95760606003193601126100d95767ffffffffffffffff602435818111610491576118f69036908601611ac1565b916044359182116100d957506119379361194b9261191a6119219336908401611b91565b9135612f24565b9392948051968796608088526080880190611c37565b921515602087015285830390860152611c37565b9060608301520390f35b6060810190811067ffffffffffffffff82111761197157604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6080810190811067ffffffffffffffff82111761197157604052565b6040810190811067ffffffffffffffff82111761197157604052565b60a0810190811067ffffffffffffffff82111761197157604052565b6020810190811067ffffffffffffffff82111761197157604052565b90601f601f19910116810190811067ffffffffffffffff82111761197157604052565b67ffffffffffffffff81116119715760051b60200190565b359060ff82168203611a5957565b600080fd5b67ffffffffffffffff811161197157601f01601f191660200190565b81601f82011215611a5957803590611a9182611a5e565b92611a9f6040519485611a10565b82845260208383010111611a5957816000926020809301838601378301015290565b9080601f83011215611a59578135611ad881611a33565b92604091611ae883519586611a10565b808552602093848087019260051b84010193818511611a5957858401925b858410611b17575050505050505090565b67ffffffffffffffff8435818111611a5957860191608080601f198588030112611a5957845190611b47826119a0565b8a8501358252858501358b830152606090611b63828701611a4b565b87840152850135938411611a5957611b82878c80979681970101611a7a565b90820152815201930192611b06565b81601f82011215611a5957803591611ba883611a33565b92611bb66040519485611a10565b808452602092838086019260051b820101928311611a59578301905b828210611be0575050505090565b81358152908301908301611bd2565b60005b838110611c025750506000910152565b8181015183820152602001611bf2565b90601f19601f602093611c3081518092818752878088019101611bef565b0116010190565b908082519081815260208091019281808460051b8301019501936000915b848310611c655750505050505090565b9091929394958480611cac83601f1986600196030187528a51805182528381015184830152604060ff81830151169083015260608091015191608080928201520190611c12565b9801930193019194939290611c55565b6004359073ffffffffffffffffffffffffffffffffffffffff82168203611a5957565b359073ffffffffffffffffffffffffffffffffffffffff82168203611a5957565b9080601f83011215611a59578135611d1781611a33565b92604091611d2783519586611a10565b808552602093848087019260051b84010193818511611a5957858401925b858410611d56575050505050505090565b67ffffffffffffffff8435818111611a59578601916060601f199080828689030112611a5957855191611d8883611955565b611d938c8701611cdf565b835286860135858111611a59578790870191828a030112611a5957865190611dba826119bc565b8c8101356004811015611a5957825287810135868111611a59578d8a91611de2930101611a7a565b8c8201528b830152840135928311611a5957611e05868b80969581960101611ac1565b85820152815201930192611d45565b359067ffffffffffffffff82168203611a5957565b359065ffffffffffff82168203611a5957565b919091608081840312611a595760405190611e56826119a0565b8193813567ffffffffffffffff8111611a595782019080601f83011215611a5957813590611e8382611a33565b91611e916040519384611a10565b808352602093848085019260051b820101928311611a59578401905b828210611eed57505050606092611ee89284928652611ecd818301611e14565b90860152611edd60408201611cdf565b604086015201611e29565b910152565b848091611ef984611cdf565b815201910190611ead565b91906040928381830312611a595783518481019167ffffffffffffffff95828410878511176119715783815282968235818111611a5957830192608084880312611a5957611f51866119a0565b8335828111611a595787611f66918601611d00565b865260209586850135838111611a595788611f82918701611a7a565b606095869182890152611f96868201611e29565b608089015201358015158103611a595760a0870152855285810135918211611a5957019085601f83011215611a5957813590611fd182611a33565b96611fde82519889611a10565b8288528685818a01940285010193818511611a59578701925b848410612008575050505050500152565b8584830312611a5957878691845161201f81611955565b61202887611a4b565b815282870135838201528587013586820152815201930192611ff7565b9291909261205284611a33565b916120606040519384611a10565b829480845260208094019060051b830192828411611a595780915b84831061208a57505050505050565b823567ffffffffffffffff8111611a595786916120aa8684938601611f04565b81520192019161207b565b9080601f83011215611a59578160206120d093359101612045565b90565b906040600319830112611a595767ffffffffffffffff600435818111611a59578361210091600401611e3c565b92602435918211611a59576120d091600401611f04565b6003111561212157565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b156121585750565b61217c9060405191829162461bcd60e51b8352602060048401526024830190611c12565b0390fd5b91909165ffffffffffff8080941691160191821161219a57565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b906080810191805160808352805180945260a083019360208092019060005b818110612239575050506060828267ffffffffffffffff65ffffffffffff9484960151169086015273ffffffffffffffffffffffffffffffffffffffff604082015116604086015201511691015290565b825173ffffffffffffffffffffffffffffffffffffffff16875295830195918301916001016121e8565b906080810182519060808352815180915260a0830190602060a08260051b8601019301916000905b8282106122cc575050505060606122af819260208601518582036020870152611c12565b9365ffffffffffff60408201511660408501520151151591015290565b909192937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60868203018252845173ffffffffffffffffffffffffffffffffffffffff815116825260208101516060602084015280516004808210156123e55750602060409261234c926060870152015182608086015260a0850190611c12565b910151916040818303910152815180825260208201906020808260051b85010194019260005b82811061239257505050505060208060019296019201920190929161228b565b90919293946020806123d883601f198760019603018952608060608b5180518452858101518685015260ff60408201511660408501520151918160608201520190611c12565b9701950193929101612372565b6021907f4e487b71000000000000000000000000000000000000000000000000000000006000525260246000fd5b80519061242860409283855283850190612263565b9060208091015193818184039101528080855193848152019401926000905b83821061245657505050505090565b8451805160ff16875280840151878501528101518682015260609095019493820193600190910190612447565b919061248e83613b78565b9261249884612b39565b606082510151156125c95760206124af8383612987565b015190816000925b612586575060ff905151911603612542577f4f465027a3d06ea73dd12be0f5c5fc0a34e21f19d6eaed4834a7a944edabc9016020849261252b61250465ffffffffffff4216925151613ca1565b60405190612511826119a0565b6000825283858301526000604083015260608201526139e6565b8460005260008352604060002055604051908152a2565b606460405162461bcd60e51b815260206004820152600a60248201527f21756e616e696d6f7573000000000000000000000000000000000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81019080821161219a57169160ff80911690811461219a5760010191806124b7565b606460405162461bcd60e51b815260206004820152601360248201527f5374617465206d7573742062652066696e616c000000000000000000000000006044820152fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff811461219a5760010190565b8051156126475760200190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8051600110156126475760400190565b80518210156126475760209160051b010190565b60005b82518110156126e65773ffffffffffffffffffffffffffffffffffffffff806126c68386612686565b5116908316146126de576126d99061260d565b61269d565b505050600190565b505050600090565b51908115158203611a5957565b9092919261270881611a5e565b916127166040519384611a10565b829482845282820111611a59576020612730930190611bef565b565b9190604083820312611a5957612747836126ee565b9260208101519067ffffffffffffffff8211611a5957019080601f83011215611a595781516120d0926020016126fb565b9060208061278f8451604085526040850190612263565b93015191015290565b90815180825260208092019182818360051b82019501936000915b8483106127c35750505050505090565b90919293949584806127dd83856001950387528a51612778565b98019301930191949392906127b3565b60009161286b610e4c9295949561287e61282c61282573ffffffffffffffffffffffffffffffffffffffff60408501511695846128f7565b9883612987565b97604051988996879586957f9936d8120000000000000000000000000000000000000000000000000000000087526060600488015260648701906121c9565b6003199384878303016024880152612798565b03915afa9182156128b157600090819361289757509190565b906128ad9293503d8091833e610ea88183611a10565b9091565b6040513d6000823e3d90fd5b604051906128ca826119bc565b60006020836040516128db816119a0565b6060815260608382015283604082015283606082015281520152565b815191601f1961291f61290985611a33565b946129176040519687611a10565b808652611a33565b0160005b81811061297057505060005b815181101561296a57806129506129496129659385612686565b5185612987565b61295a8287612686565b526102a68186612686565b61292f565b50505090565b60209061297b6128bd565b82828801015201612923565b91906129916128bd565b50805190604051916129a2836119bc565b82526020928383019260009283855283955b808201805151881015612a96576129e4906129dd896129d6869896518d613c2a565b9251612686565b5190613a9a565b92859473ffffffffffffffffffffffffffffffffffffffff809516955b8a518051821015612a8657612a17828892612686565b51168714612a2d57612a289061260d565b612a01565b929891955093509060ff8111612a5957906001612a4f921b875117875261260d565b95929190926129b4565b6024867f4e487b710000000000000000000000000000000000000000000000000000000081526011600452fd5b50509350935095612a4f9061260d565b50505093509350505090565b612adf9060005260006020526040600020548060d01c9173ffffffffffffffffffffffffffffffffffffffff65ffffffffffff8360a01c16921690565b505065ffffffffffff80911691161115612af557565b606460405162461bcd60e51b815260206004820152601c60248201527f7475726e4e756d5265636f7264206e6f7420696e637265617365642e000000006044820152fd5b612b4460029161397f565b612b4d81612117565b14612b5457565b606460405162461bcd60e51b815260206004820152601260248201527f4368616e6e656c2066696e616c697a65642e00000000000000000000000000006044820152fd5b9190820180921161219a57565b3d15612bd0573d90612bb682611a5e565b91612bc46040519384611a10565b82523d6000602084013e565b606090565b90919015612be1575090565b8151156121585750805190602001fd5b9080601f83011215611a595781516120d0926020016126fb565b80518101602082820312611a5957602082015167ffffffffffffffff8111611a595760208201603f828501011215611a59576020818401015190612c4e82611a33565b93612c5c6040519586611a10565b82855260208501916020850160408560051b838501010111611a5957604081830101925b60408560051b83850101018410612c9a5750505050505090565b835167ffffffffffffffff8111611a595782840101601f1990606082828a030112611a595760405191612ccc83611955565b604082015173ffffffffffffffffffffffffffffffffffffffff81168103611a59578352606082015167ffffffffffffffff8111611a5957604090830191828b030112611a595760405190612d20826119bc565b60408101516004811015611a5957825260608101519067ffffffffffffffff8211611a59576040612d579260208d01920101612bf1565b60208201526020830152608081015167ffffffffffffffff8111611a595760208901605f828401011215611a59576040818301015190612d9682611a33565b92612da46040519485611a10565b828452602084019060208c0160608560051b858401010111611a5957606083820101915b60608560051b85840101018310612df15750505050506040820152815260209384019301612c80565b825167ffffffffffffffff8111611a5957608083860182018f037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc00112611a595760405191612e3f836119a0565b8386018201606081015184526080810151602085015260a0015160ff81168103611a5957604084015260c0828786010101519267ffffffffffffffff8411611a59578f602094936060869586612e9c9401928b8a01010101612bf1565b6060820152815201920191612dc8565b90612eb682611a33565b604090612ec582519182611a10565b838152601f19612ed58295611a33565b0191600091825b848110612eea575050505050565b6020908351612ef8816119a0565b8581528286818301528686830152606080830152828501015201612edc565b9190820391821161219a57565b91929083518015156000146131a357612f3c90612eac565b91600091612f4a8151612eac565b95600190818097938960009586935b612f67575b50505050505050565b90919293949597835185101561319a57612f818585612686565b5151612f8d8685612686565b515260409060ff8083612fa08989612686565b5101511683612faf8988612686565b510152606080612fbf8989612686565b51015181612fcd8a89612686565b51015260209384612fde8a8a612686565b51015186811115613194575085965b8d8b51908b821592831561316a575b5050506000146131395750600283828f613016908c612686565b51015116146130f6578f96959493868f918f6130b3906130b9946130c5988f988f908f916130bf9a898f9461308e8f86928861306983613063888461305b848e612686565b510151612f17565b93612686565b5101526130768187612686565b515198856130848389612686565b5101511695612686565b5101519482519661309e886119a0565b875286015284015282015261022f8383612686565b50612b98565b9c61260d565b95612686565b5101516130ed575b6130e0916130da91612f17565b9361260d565b91909493928a9085612f59565b60009a506130cd565b84606491519062461bcd60e51b82526004820152601b60248201527f63616e6e6f74207472616e7366657220612067756172616e74656500000000006044820152fd5b90506130c592508891508461315483959e989796958a612686565b510151846131628484612686565b510152612686565b82109250908261317f575b50508e8b38612ffc565b61318b9192508d612686565b51148a8f613175565b96612fed565b97829150612f5e565b50612f3c8151612eac565b90815180825260208092019182818360051b82019501936000915b8483106131d95750505050505090565b9091929394958181038352865173ffffffffffffffffffffffffffffffffffffffff81511682528581015190606091828885015280516004808210156123e55750918861323f9285948796839801520151604092839182608088015260a0870190611c12565b91015193828183039101528351908181528581019286808460051b8401019601946000915b8483106132875750505050505050908060019298019301930191949392906131c9565b91939597806132c989601f1987600196989a9c03018b526080878d5180518452858101518685015260ff89820151168985015201519181898201520190611c12565b99019701930190918b979695939492613264565b80517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff810190811161219a5761331290612eac565b9161331d8483612686565b51606081015192604094855191613333836119bc565b6000958684528660208095015287818051810103126107945787805191613359836119bc565b85810151835201519084810191825287998890899c8a988b5b87518d10156134db578f848e146134cc578c8f8f906133df858f8f908f6133998782612686565b515195826133a78984612686565b51015160606133bd8a60ff856130848389612686565b510151938251986133cd8a6119a0565b89528801528601526060850152612686565b526133ea848d612686565b50871590816134b6575b5061347c575b501580613467575b613419575b6130b96134139161260d565b9b613372565b9e509861345c908f6134478b61343d8f6134338391612676565b510151938d612686565b5101918251612b98565b9052896134538d612676565b51015190612b98565b60019e909990613407565b506134728d89612686565b5151875114613402565b829c919650613453818c6134a58f61343d6134ac988261349c819961263a565b51015194612686565b905261263a565b996001948c6133fa565b6134c191508b612686565b51518851148f6133f4565b509b9d5061341360019e61260d565b509899509c969a995050939992505050156135cf571561358c5715613549578301510361350757505090565b60649250519062461bcd60e51b825280600483015260248201527f746f74616c5265636c61696d6564213d67756172616e7465652e616d6f756e746044820152fd5b60648484519062461bcd60e51b82526004820152601460248201527f636f756c64206e6f742066696e642072696768740000000000000000000000006044820152fd5b60648585519062461bcd60e51b82526004820152601360248201527f636f756c64206e6f742066696e64206c656674000000000000000000000000006044820152fd5b60648686519062461bcd60e51b82526004820152601560248201527f636f756c64206e6f742066696e642074617267657400000000000000000000006044820152fd5b73ffffffffffffffffffffffffffffffffffffffff90818151169160005b6040808401908151918251841015612f5e578461364e858095612686565b51519161365f602095869251612686565b510151918060a01c1560001461378f5716876136df57600080809381935af1613686612ba5565b501561369c5750506136979061260d565b613630565b60649250519062461bcd60e51b82526004820152601660248201527f436f756c64206e6f74207472616e7366657220455448000000000000000000006044820152fd5b82517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9190911660048201526024810191909152929190818460448160008b5af1908115613785575061374f575b50613697915061260d565b82813d831161377e575b6137638183611a10565b81010312611a5957613777613697926126ee565b5038613744565b503d613759565b513d6000823e3d90fd5b6000898152600186528481209181529452509120805461369793926137b391612b98565b905561260d565b916137f89060005260006020526040600020548060d01c9173ffffffffffffffffffffffffffffffffffffffff65ffffffffffff8360a01c16921690565b9391505061381c73ffffffffffffffffffffffffffffffffffffffff928392613a60565b1691160361382657565b606460405162461bcd60e51b815260206004820152601560248201527f696e636f72726563742066696e6765727072696e7400000000000000000000006044820152fd5b61387560029161397f565b61387e81612117565b0361388557565b606460405162461bcd60e51b815260206004820152601660248201527f4368616e6e656c206e6f742066696e616c697a65642e000000000000000000006044820152fd5b919061393d9161390c8460005260006020526040600020548060d01c9173ffffffffffffffffffffffffffffffffffffffff65ffffffffffff8360a01c16921690565b5092906040519361391c856119a0565b65ffffffffffff8092168552166020840152604083015260608201526139e6565b906000526000602052604060002055565b9061395882611a33565b6139656040519182611a10565b828152601f196139758294611a33565b0190602036910137565b6139c365ffffffffffff9160005260006020526040600020548060d01c9173ffffffffffffffffffffffffffffffffffffffff65ffffffffffff8360a01c16921690565b5090501680156000146139d65750600090565b42106139e157600290565b600190565b73ffffffffffffffffffffffffffffffffffffffff613a5b7fffffffffffff0000000000000000000000000000000000000000000000000000835160d01b1679ffffffffffff0000000000000000000000000000000000000000602085015160a01b1617926060604082015191015190613a60565b161790565b73ffffffffffffffffffffffffffffffffffffffff916040519060208201928352604082015260408152613a9381611955565b5190201690565b90600060806020926040948551858101917f19457468657265756d205369676e6564204d6573736167653a0a3332000000008352603c820152603c8152613ae081611955565b5190209060ff8151169086868201519101519187519384528684015286830152606082015282805260015afa15613785576000519073ffffffffffffffffffffffffffffffffffffffff821615613b35575090565b6064905162461bcd60e51b815260206004820152601160248201527f496e76616c6964207369676e61747572650000000000000000000000000000006044820152fd5b80519060209167ffffffffffffffff838301511673ffffffffffffffffffffffffffffffffffffffff9165ffffffffffff606084604087015116950151166040519485938785019760a086019060808a5285518092528060c088019601976000905b838210613c0d5750505050613c07955060408501526060840152608083015203601f198101835282611a10565b51902090565b895181168852988201988a98509682019660019190910190613bda565b613c07613c39613c7792613b78565b926020810151815191606065ffffffffffff6040830151169101511515613c8a60405196879460208601998a5260a0604087015260c0860190611c12565b601f1995868683030160608701526131ae565b91608084015260a083015203908101835282611a10565b604051613c07816106b860208201946020865260408301906131ae56fea264697066735822122092d93750d987e26849282c7151b52689aeb7729e9eb2796d4ec99da949a0914b64736f6c63430008110033";

type NitroAdjudicatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: NitroAdjudicatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class NitroAdjudicator__factory extends ContractFactory {
  constructor(...args: NitroAdjudicatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<NitroAdjudicator> {
    return super.deploy(overrides || {}) as Promise<NitroAdjudicator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): NitroAdjudicator {
    return super.attach(address) as NitroAdjudicator;
  }
  override connect(signer: Signer): NitroAdjudicator__factory {
    return super.connect(signer) as NitroAdjudicator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): NitroAdjudicatorInterface {
    return new utils.Interface(_abi) as NitroAdjudicatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): NitroAdjudicator {
    return new Contract(address, _abi, signerOrProvider) as NitroAdjudicator;
  }
}
